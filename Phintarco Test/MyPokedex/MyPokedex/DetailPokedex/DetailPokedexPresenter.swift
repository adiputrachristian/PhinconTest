//
//  DetailPokedexPresenter.swift
//  MyPokedex
//
//  Created by Christian Adiputra on 06/03/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation
import NetworkKit

final class DetailPokedexPresenter {

    // MARK: - Private properties -

    private unowned let view: DetailPokedexViewInterface
    private let interactor: DetailPokedexInteractorInterface
    private let wireframe: DetailPokedexWireframeInterface
    
    private let pokemonId: Int?
    var pokemon: PokemonDetail?

    // MARK: - Lifecycle -

    init(
        view: DetailPokedexViewInterface,
        interactor: DetailPokedexInteractorInterface,
        wireframe: DetailPokedexWireframeInterface,
        pokemonId: Int
    ) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
        self.pokemonId = pokemonId
        self.getDetailPokemon(id: pokemonId)
    }
}

// MARK: - Extensions -

extension DetailPokedexPresenter: DetailPokedexPresenterInterface {
    func addPokemon() {
        let name = getName()
        let num = getFibo(num: interactor.getTotalPokemon())
        let pokemonName = "\(name) - \(num)"
        let pokemon = MyPokemon(name: pokemonName, url: getUrl())
        interactor.addPokemon(pokemon: pokemon)
    }
    
    
    func catchPokemon() {
        let randomInt = Int.random(in: 2...9)
        if ((randomInt % 2) != 0) {
            view.catchFailed()
        } else {
            addPokemon()
            view.catchSucceeded()
        }
    }
    
    func getDetailPokemon(id: Int) {
        interactor.getDetailPokemon(id: id)
    }
    
    func getName() -> String {
        guard let name = pokemon?.name else { return "-"}
        return name
    }
    
    func getUrl() -> String {
        guard let url = pokemon?.images?.frontDefault else { return "-"}
        return url
    }
    
    func getType() -> String {
        guard let type = pokemon?.types else { return "-"}
        let types = type.map({$0?.type?.name ?? ""})
        let typesString = types.joined(separator: ", ")
        return typesString
    }
    
    func getMove() -> String {
        guard let move = pokemon?.moves else { return "-"}
        let getMoves = Array(move.prefix(5))
        let moves = getMoves.map({$0?.move?.name ?? ""})
        let movesString = moves.joined(separator: ", ")
        return movesString
    }
    
    func getFibo(num: Int) -> Int {
        var n1 = 0
        var n2 = 1
        var nR = 0
        
        for _ in 0..<num{
            nR = n1
            n1 = n2
            n2 = nR + n2
        }
        return n1
    }
    
}

extension DetailPokedexPresenter: DetailPokedexInteractorOutputInterface {
    func didSuccessGetDetailPokemon(pokemon: PokemonDetail?) {
        self.pokemon = pokemon
        view.updateView()
    }
    
    func didFailedGetDetailPokemon(message: String) {
        
    }
    
    
}
